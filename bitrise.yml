---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

workflows:
  run_from_repo:
    after_run:
    - make_dependencies
    - run_linter
    - run_unit_tests
    - _deploy_artifacts

  tagged_commit:
    after_run:
    - make_dependencies
    - run_linter
    - run_unit_tests
    - ship
    - _deploy_artifacts
    - _notify_failure_on_slack

  _deploy_artifacts:
    description: |-
        Uploads artifacts to associate them with build log on Bitrise.io.
    steps:
    - deploy-to-bitrise-io: {}

  make_dependencies:
    description: |-
        Does `make dependencies` to prepare source code in repo for building and testing.
    steps:
    - script:
        title: Do `make dependencies`
        inputs:
        - content: |-
            #!/usr/bin/env zsh
            set -e
            make dependencies

  run_linter:
    description: |-
        Runs swiftlint and license check for all source and test files.
    steps:
    - swiftlint@0.8.0:
        title: Lint Sources/*
        inputs:
        - strict: 'yes'
        - lint_config_file: "$BITRISE_SOURCE_DIR/tools/lint/sources.swiftlint.yml"
        - linting_path: "$BITRISE_SOURCE_DIR"
        - reporter: emoji
    - swiftlint@0.8.0:
        title: Lint Tests/*
        is_always_run: true
        inputs:
        - strict: 'yes'
        - linting_path: "$BITRISE_SOURCE_DIR"
        - lint_config_file: "$BITRISE_SOURCE_DIR/tools/lint/tests.swiftlint.yml"
        - reporter: emoji
    - script:
        title: Check license headers
        is_always_run: true
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            ./tools/license/check-license.sh

  run_unit_tests:
    description: |-
        Runs unit tests for SDK on iOS Simulator.
    steps:
    - xcode-test:
        title: Run unit tests for DatadogSDKBridge - iOS Simulator
        inputs:
        - scheme: DatadogSDKBridge-Example
        - simulator_device: iPhone 12 mini
        - is_clean_build: 'yes'
        - generate_code_coverage_files: 'yes'
        - project_path: Example/DatadogSDKBridge.xcworkspace
        - xcpretty_test_options: --color --report html --output "${BITRISE_DEPLOY_DIR}/DatadogSDKBridge-unit-tests.html"

  ship:
    description: |-
        Ships the tagged version to Cocoapods trunk and uploads binaries to Github.
    steps:
    - script:
        title: Ship tagged version
        inputs:
        - content: |-
            #!/usr/bin/env zsh
            set -e
            make ship

  _notify_failure_on_slack:
    description: |-
        Notifies any (previous) workflow failure on Slack.
        Should be used to notify failures for workflows which do not report back to GitHub check.
    steps:
    - slack:
        is_always_run: true
        run_if: .IsBuildFailed
        inputs:
        - channel: '#dd-sdk-ios'
        - buttons: |-
            See Bitrise log|${BITRISE_BUILD_URL}
        - pretext: |-
            ⚠️ Bitrise build failed.
        - color_on_error: '#FF0000'
        - author_name: ''
        - message: ''
        - message_on_error: 'dd-bridge-ios failed to ship!'
        - icon_url: 'https://avatars.githubusercontent.com/t/3555052?s=128&v=4'
        - webhook_url: '${SLACK_INCOMING_WEBHOOK_MOBILE_CI}'
